class Solution {
public:
    int search(vector<int>& nums, int target) {
        int first=0, last=nums.size()-1;
        while(first<=last){
            int mid=(first+last)/2;
            if(nums[mid]==target)  return mid;
            else if(target>nums[mid]) first=mid+1;
            else last=mid-1;
        }
        return -1;
    }
};      iterative method

class Solution {
public:
    int findindex(vector<int>&nums,int low,int high,int target){
        if(low>high)  return -1;
        int mid=(low+high)/2;
        if(nums[mid]==target)  return mid;
        else if(target>nums[mid])  return findindex(nums,mid+1,high,target);
        else  return findindex(nums,low,mid-1,target);
    }
    int search(vector<int>& nums, int target) {
        return findindex(nums,0,nums.size()-1,target);
    }
};   recursive method
