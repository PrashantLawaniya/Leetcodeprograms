
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
         ListNode* temp1=headA;
         ListNode* temp2=headB;
        int count1=0,count2=0;
         while(temp1!=NULL)
         {
            count1++;
            temp1=temp1->next;
         }
          while(temp2!=NULL)
         {
            count2++;
            temp2=temp2->next;
         }
         int count3=abs(count1-count2);
         temp1=headA;
         temp2=headB;
         if(count1>count2) 
         {
            while(count3!=0)
            {
                count3--;
                temp1=temp1->next;
            }
         }
         else
         {
              while(count3!=0)
            {
                count3--;
                temp2=temp2->next;
            }

         }
         while(temp1!=NULL)
         {
            if(temp1==temp2) return temp1;
            temp2=temp2->next;
            temp1=temp1->next;
            
         }
         return NULL;
    }


or


class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        unordered_map<ListNode*,int> mpp;
        ListNode* temp=headA;
        while(temp!=NULL)
        {
            mpp[temp]=1;
            temp=temp->next;
        }
        ListNode* temp1=headB;
        while(temp1!=NULL)
        {
           if(mpp.find(temp1)!=mpp.end())
           {
               return temp1;
           }
           temp1=temp1->next;
        }
        return NULL;
    }


optimized version

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    ListNode* temp1 = headA;
    ListNode* temp2 = headB;
    
    while(temp1 != temp2) {
       temp1=temp1->next;
       temp2=temp2->next;
       if(temp1==temp2)  return temp1;
       if(temp1==NULL) temp1=headB;
       if(temp2==NULL) temp2=headA;
       
    }
    
    return temp1;
    }
};
