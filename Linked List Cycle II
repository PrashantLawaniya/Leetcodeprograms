/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
       ListNode* slow=head;
        ListNode* fast=head;

        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;                                   using O(1) space complexity
            fast=fast->next->next;
            if(slow==fast)
            {
                  ListNode* m=head;
                while(m!=fast)
                {
               
                 m=m->next;
                 fast=fast->next;
                }
                return m;
            }
        }
return NULL;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* temp=head;
        unordered_map<ListNode*,int> mpp;
       
       while(temp!=NULL)
       {                                                                     // using unordered map
          if(temp->next==NULL)  return NULL;
          if(mpp.find(temp)!=mpp.end())
          {
            return temp;;
          }
          mpp[temp]=1;
          temp=temp->next;
       }
       return NULL;
    }
};
