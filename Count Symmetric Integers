class Solution {
public:
    int countSymmetricIntegers(int low, int high) {
        int no_of_symmetric=0;
         for(int i=low;i<=high;i++)
         {
             string s=to_string(i);
             if(s.size() % 2 == 0)
             {
                  int mid=s.size()/2;

                  int sumfirsthalf=0;
                  for(int i=0;i<mid;i++)
                  {
                     sumfirsthalf+=s[i]-'0';
                  }

                  int sumsecondhalf=0;
                  for(int i=mid;i<s.size();i++)
                  {
                     sumsecondhalf+=s[i]-'0';
                  }

                  if(sumfirsthalf==sumsecondhalf)
                  {
                    no_of_symmetric++;
                  }

             }
         }
         return no_of_symmetric;
    }
};

or

using accumulate function

class Solution {
public:
    int countSymmetricIntegers(int low, int high) {
        int count = 0;
        for (int i = low; i <= high; i++) {
            string s = to_string(i);
            if (s.size() % 2 == 0 && 
            accumulate(s.begin(), s.begin() + s.size()/2, 0) ==
            accumulate(s.begin() + s.size()/2, s.end(), 0))
                count++;
        }
        return count;
    }
};
