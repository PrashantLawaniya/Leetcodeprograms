/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
         ListNode* temp=head;
         vector<int> ans;
         while(temp!=NULL && temp->next!=NULL)
         {
            ans.push_back(temp->val);
            temp=temp->next->next;
         }
         if(temp!=NULL)  ans.push_back(temp->val);

         temp=head->next;

          while(temp!=NULL && temp->next!=NULL)
         {
            ans.push_back(temp->val);
            temp=temp->next->next;
         }
         if(temp!=NULL)  ans.push_back(temp->val);
         temp=head;
        int i=0;
         while(temp!=NULL)
        {
         temp->val=ans[i];
         i++;
         temp=temp->next;
        }
        return head;
    }
};
             without using extra space
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
         ListNode* oddlist=head;
         ListNode* evenlist=head->next;
         ListNode* evenfirstnode=evenlist;

         while(evenlist!=NULL && evenlist->next!=NULL)
         {
            oddlist->next=oddlist->next->next;
            evenlist->next=evenlist->next->next;
            
            oddlist=oddlist->next;
            evenlist=evenlist->next;
         } 
         oddlist->next=evenfirstnode;
         return head;
    }
};
