class Solution {
public:
    int findLHS(vector<int>& nums) {
       unordered_map<int,int> mpp;
       int result=0;
       for(int &ch:nums)
       {
         mpp[ch]++;
       }

       for(auto &pair:mpp)
       {
         int num = pair.first;
          if(mpp.count(num+1))
          {
             result=max(result,mpp[num]+mpp[num+1]);
          }

       }
       return result;
    }
};
or

class Solution {
public:
    int findLHS(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int maxLen = 0;
        int start = 0;

        for (int end = 0; end < nums.size(); end++) {
            while (nums[end] - nums[start] > 1) {
                start++;
            }
            if (nums[end] - nums[start] == 1) {
                maxLen = max(maxLen, end - start + 1);
            }
        }

        return maxLen;
    }
};


