class Solution {
public:
    int findGcd(int n1, int n2) {
    int gcd = 1;
    for(int i = 1; i <= min(n1, n2); i++) {
        if(n1 % i == 0 && n2 % i == 0) {
            gcd = i;
        }
    }
    return gcd;
}
    int gcdOfOddEvenSums(int n) {
      int sumodd=0;
      int sumeven=0;
        int count=1;
     while(count!=n*2)
         {
            if(count%2!=0)
            {
                sumodd+=count;
            }    
            else{
                 sumeven+=count;
            }      
            count++;
         }
        int ans=findGcd(sumodd,sumeven);
        return ans;
          
    }
};


or

The sum of first n odd numbers = 1 + 3 + 5 + ... + nth odd is n^2
 .
Proof : Sum of first n odd numbers.
The sum of first n even numbers = 2 + 4 + 6 + ... + nth even is n(n+1) or n^2+n.
Proof : Sum of first n even numbers.
This expands to â†’ gcd(n 
2
 , n 
2
 +n), so the largest number that divides both, n 
2
  and n 
2
 +n is n itself.

class Solution {
public:
    int gcdOfOddEvenSums(int n) {
        int sumOdd = n * n, sumEven = n * (n + 1);
        return gcd(sumOdd, sumEven);
    }
};
