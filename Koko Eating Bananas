class Solution {
public:
   int findmax(vector<int>& piles){
    int n=piles.size();
    int maxi=INT_MIN;
    for(int i=0;i<n;i++){                                       // also we use foreach loop                                       
         maxi=max(maxi,piles[i]);
    }
    return maxi;
   }
   long long calculateTotalHours(vector<int>& piles,int hourly){
      long long totalhours=0;
      int n=piles.size();
      for(int i=0;i<n;i++){
        totalhours+=ceil((double)(piles[i]) / (double)(hourly));
      }
      return totalhours;
   }

    int minEatingSpeed(vector<int>& piles, int h) {
        int low=1 , high=findmax(piles);
       // int ans=-1;
        while(low<=high){
            int mid=low + (high - low) / 2;
            long long totalhours=calculateTotalHours(piles,mid);
            if(totalhours<=h){
              //   ans=mid;
                 high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;
    }
};
