
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL)  return list2;
        if(list2==NULL)  return list1;

        ListNode* temp1=list1;
        ListNode* temp2=list2;

        vector<int> ans;
        while(temp1!=NULL)                                         c++
        {
            ans.push_back(temp1->val);
            temp1=temp1->next;
        }
        while(temp2!=NULL)
        {
            ans.push_back(temp2->val);
            temp2=temp2->next;
        }
        sort(ans.begin(),ans.end());
         ListNode* dummy=new ListNode(0);
         ListNode* curr=dummy;
        for(int i=0;i<ans.size();i++)
        {
            curr->next=new ListNode(ans[i]);
            curr=curr->next;
        }
       return dummy->next;
       
    }
};


class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null)  return list2;
        if(list2==null)  return list1;

        ListNode temp1=list1;
        ListNode temp2=list2;
                                                                                    IN JAVA
        List<Integer> ans = new ArrayList<>();
        while(temp1!=null)
        {
            ans.add(temp1.val);
            temp1=temp1.next;
        }
        while(temp2!=null)
        {
            ans.add(temp2.val);
            temp2=temp2.next;
        }
        
        Collections.sort(ans);
        
         ListNode dummy=new ListNode(0);
         ListNode curr=dummy;
        for(int val:ans)
        {
            curr.next=new ListNode(val);
            curr=curr.next;
        }
       return dummy.next;
    }
}


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL)   return list2;
        if(list2==NULL)   return list1;
        
         ListNode* temp1=list1;
         ListNode* temp2=list2;

      ListNode* dummy=new ListNode(0);
      ListNode* curr=dummy;

      while(temp1!=NULL && temp2!=NULL)
      {
          if(temp1->val<temp2->val)
          {
             curr->next=temp1;
             temp1=temp1->next;
          }
          else
          {
            curr->next=temp2;
            temp2=temp2->next;                                 optimized code

          }
          curr=curr->next;
      }
      if(temp1!=NULL)  curr->next=temp1;
      else curr->next=temp2;


       return dummy->next;
    }
};
