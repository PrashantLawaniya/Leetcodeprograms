class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first=firstOccurence(nums,target);
        if(first==-1)  return {-1,-1};
        int last=lastOccurence(nums,target);
        return {first,last};
    }

    int firstOccurence(vector<int>& nums, int target){
        int low=0 , high=nums.size()-1;
        int first=-1;

        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                first=mid;
                high=mid-1;
            }
            else if(nums[mid]<target) low=mid+1;
            else high=mid-1;
        }
        return first;                          // Time complexity == O(logn);   
    }

    int lastOccurence(vector<int>& nums, int target){
        int low=0 , high=nums.size()-1;
        int last=-1;

        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]<target) low=mid+1;
            else high=mid-1;
        }
        return last;
    }
};
 

///  Brute force Approch(linear search);
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int startingPosition = -1, endingPosition = -1;
        int n = nums.size();
        for(int i=0; i<n; i++){
            if(nums[i] == target){                   // Time complexity= O(n);
                startingPosition = i;
                break;
            }
        }
        for(int i=n-1; i>=0; i--){
            if(nums[i] == target){
                endingPosition = i;
                break;
            }
        }
        return {startingPosition, endingPosition};
    }
};


