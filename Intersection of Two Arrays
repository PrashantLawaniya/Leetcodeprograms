class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> set1(nums1.begin(), nums1.end());
        unordered_set<int> set2(nums2.begin(), nums2.end());

        vector<int> result;
        for (auto num : set1) {
            if (set2.find(num) != set2.end()) {
                result.push_back(num);
            }
        }

        return result;
    }
};

or

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {

          unordered_map<int,int> freqMap;
       unordered_set<int> uniqueSet;
        
    for (int num : nums1) uniqueSet.insert(num);
    for (int num : uniqueSet) freqMap[num]++;
    uniqueSet.clear(); 

    
    for (int num : nums2) uniqueSet.insert(num);
    for (int num : uniqueSet) freqMap[num]++;
    uniqueSet.clear(); 

    vector<int>ans;
    for(auto pair:freqMap)
    {
        if(pair.second>=2)
        {
            ans.push_back(pair.first);
        }
    }
     return ans;
    }
};
