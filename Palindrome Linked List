/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<int> stk;
        ListNode* temp=head;
        
        while(temp!=NULL)
        {
            stk.push(temp->val);
            temp=temp->next;
        }

        temp=head;

        while(temp!=NULL)
        {
            if(temp->val==stk.top())
            {
                stk.pop();
            }
           else if(temp->val!=stk.top())
           {
            return false;
           }
           temp=temp->next;
        }
        return true;
    }
without using extra space

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
ListNode* reversedlinkedlist(ListNode* head)
{
    if(head==NULL || head->next==NULL)
    {
        return head;
    }
    ListNode* temp=head;
    ListNode* prev=NULL;
    while(temp!=NULL)
    {
        ListNode* front=temp->next;
        temp->next=prev;
        prev=temp;
        temp=front;
    }
    return prev;
}
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return true;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
                slow=slow->next;
                fast=fast->next->next;
        }
        ListNode* newhead=reversedlinkedlist(slow->next);
        ListNode* second=newhead;
        ListNode* first=head;
        while(second!=NULL)
        {
            if(first->val!=second->val)
            {
                reversedlinkedlist(newhead);
                return false;
            }
            first=first->next;
            second=second->next;
            
        }
        reversedlinkedlist(newhead);
        return true;
    }
};
